embed
{{ coq
Require Export Ascii.
Require Export String.

Open Scope string_scope.
}}
metavar a ::=
          {{ lex alphanum }}
          {{ com character }}
          {{ coq ascii }}
grammar
s :: s_ ::=
  {{ com string }}
  {{ coq string }}
  | e :: M :: empty
    {{ coq "" }}
    {{ tex \epsilon }}
  | a :: M :: char
    {{ coq (String [[a]] "") }}
  | s s' :: M :: concat_2
    {{ coq ([[s]] ++ [[s']]) }}

regexp, r :: regexp_ ::=
  {{ com regexp }}
  | 0 :: :: zero
  | 1 :: :: unit
  | a :: :: char
  | r + r' :: :: plus
  | r r' :: :: times
  | r * :: :: star
    {{ tex [[r]]^* }}

terminals :: terminals_ ::=
	  | in :: :: in {{ tex \in }}
	  | L :: :: L {{ tex \mathit{L} }}	

formula :: formula_ ::=
	| judgement :: :: judgement

defns
  regexp_ins :: '' ::=

defn
 s in L ( r ) :: :: s_in_regexp_lang :: s_in_regexp_lang_
 {{ com string in regexp language }} by

 ------------ :: unit
 e in L ( 1 )

 ------------ :: char
 a in L ( a )

 s in L ( r1 )
 ------------------ :: plus_1
 s in L ( r1 + r2 )

 s in L ( r2 )
 ------------------ :: plus_2
 s in L ( r1 + r2 )

 s in L ( r1 )
 s' in L ( r2 )
 ------------------- :: times
 s s' in L ( r1 r2 )

 -------------- :: star_1
 e in L ( r * )

 s in L ( r )
 s' in L ( r * )
 ----------------- :: star_2
 s s' in L ( r * )

defns
  regexp_ins_c :: '' ::=

defn
 s in L ( r ; a ) :: :: s_in_regexp_c_lang :: s_in_regexp_c_lang_
 {{ com string in regexp c language }} by 

 a s in L ( r )
 ----------------- :: cs
 s in L ( r ; a )

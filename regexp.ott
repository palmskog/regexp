embed
{{ coq
Require Export Ascii.
Require Export String.

Open Scope string_scope.

Hint Resolve bool_dec : ott_coq_equality.
Hint Resolve ascii_dec : ott_coq_equality.
}}
metavar a ::=
          {{ lex alphanum }}
          {{ com character }}
          {{ coq ascii }}
          {{ coq-equality }}
indexvar n ::=
	 {{ lex numeral }}
	 {{ com index variable }}
	 {{ coq nat }}
grammar
s :: s_ ::=
  {{ com string }}
  {{ coq string }}
  {{ coq-equality }}
  | e :: M :: empty
    {{ coq "" }}
    {{ tex \epsilon }}
  | a :: M :: char
    {{ coq (String [[a]] "") }}
  | s s' :: M :: concat_2
    {{ coq (append [[s]] [[s']]) }}
%  | s1 .. sn :: M :: concat_n
%    {{ coq (flatten [[s1 .. sn]]) }}

regexp, r :: regexp_ ::=
  {{ com regexp }}
  | 0 :: :: zero
  | 1 :: :: unit
  | a :: :: char
  | r + r' :: :: plus
  | r r' :: :: times
%  | r * :: :: star 
%    {{ tex [[r]]^* }}

terminals :: terminals_ ::=
	  | in :: :: in {{ tex \in }}
	  | L :: :: L {{ tex \mathit{L} }}	

formula :: formula_ ::=
	| judgement :: :: judgement
	| formula1 .. formulan :: :: dots

%embed
%{{ coq
%Definition flatten (ls : list s) : s := fold_left append ls "".
%}}

defns
  regexp_ins :: '' ::=

defn
 s in L ( r ) :: :: s_in_regexp_lang :: s_in_regexp_lang_
 {{ com string in regexp language }} by

 ------------ :: unit
 e in L ( 1 )

 ------------ :: char
 a in L ( a )

 s in L ( r1 )
 ------------------ :: plus_1
 s in L ( r1 + r2 )

 s in L ( r2 )
 ------------------ :: plus_2
 s in L ( r1 + r2 )

 s in L ( r1 )
 s' in L ( r2 )
 ------------------- :: times
 s s' in L ( r1 r2 )
 
% s1 in L ( r ) .. sn in L ( r )
% ------------------------------ :: star
% s1 .. sn in L ( r * ) 

defns
  regexp_ins_c :: '' ::=

defn
 s in L ( r ; a ) :: :: s_in_regexp_c_lang :: s_in_regexp_c_lang_
 {{ com string in regexp c language }} by 

 a s in L ( r )
 ----------------- :: cs
 s in L ( r ; a )  

defns
  regexp_spec :: '' ::=

defn 
  r ! s :: :: s_matches_r :: s_matches_r_
  {{ com string matches regexp }} by
 
  ----- :: unit
  1 ! e

  ----- :: char
  a ! a

  r1 ! s
  ----------- :: plus_1
  r1 + r2 ! s

  r2 ! s
  ----------- :: plus_2
  r1 + r2 ! s
    
  r1 ! s1
  r2 ! s2
  ------------- :: times
  r1 r2 ! s1 s2

 % ------- :: star_1
 % r * ! e
 % 
 % r ! s1
 % r * ! s2
 % ----------- :: star_2
 % r * ! s1 s2
